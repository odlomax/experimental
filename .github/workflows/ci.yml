name: CI

on:
  push:
    branches:
      - main
    paths-ignore: 
      - 'docs/**'
  pull_request:
    branches:
      - main
    paths-ignore: 
      - 'docs/**'
jobs:
  clang-format:
    runs-on: ubuntu-latest
    name: Format code with clang-format and commit changes
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y clang-format
      - name: Format source files
        run: find . -name '*.cpp' -o -name '*.hpp' | xargs clang-format -i -style=file
      - name: Commit and push changes
        env: 
          CI_COMMIT_MESSAGE: Apply clang-format.
          CI_COMMIT_AUTHOR: CI Bot
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "odlomax@users.noreply.github.com"
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "${{ env.CI_COMMIT_MESSAGE }}"
            git push
          fi
  gcov:
    needs: clang-format
    runs-on: ubuntu-latest
    name: Code coverage with gcov
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y cmake gcc g++ catch2 gcovr
      - name: Configure
        run: cmake -S . -B build -DCMAKE_CXX_COMPILER=g++ -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage"
      - name: Build
        run: cmake --build build
      - name: Test
        run: cd build && ctest --output-on-failure
      - name: Run gcovr (coverage)
        run: |
          cd build
          gcovr --root .. --filter ../src --filter ../include --html-details coverage.html --html-theme github.dark-green
      - name: Commit and push code coverage report
        env: 
          CI_COMMIT_MESSAGE: Add code coverage report.
          CI_COMMIT_AUTHOR: CI Bot
        run: |
          mkdir -p docs/coverage
          rm -rf docs/coverage/*
          mv build/coverage.* docs/coverage/
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "odlomax@users.noreply.github.com"
          git add docs/coverage/*
          git commit -m "${{ env.CI_COMMIT_MESSAGE }}"
          git fetch origin
          git rebase --strategy-option=theirs origin/main
          git push

  deploy-gcov-report:
    needs: gcov
    name: Deploy code coverage report to GitHub Pages
    concurrency:
      group: "pages"
      cancel-in-progress: false
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}/coverage/coverage.html
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  build-gcc-debug:
    needs: clang-format
    runs-on: ubuntu-latest
    name: Build and test with GCC (Debug)
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y cmake gcc g++ catch2
      - name: Configure
        run: cmake -S . -B build -DCMAKE_CXX_COMPILER=g++ -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fsanitize=address,undefined -fno-omit-frame-pointer"
      - name: Build
        run: cmake --build build
      - name: Test
        run: cd build && ctest --output-on-failure

  build-gcc-release:
    needs: clang-format
    runs-on: ubuntu-latest
    name: Build and test with GCC (Release)
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y cmake gcc g++ catch2
      - name: Configure
        run: cmake -S . -B build -DCMAKE_CXX_COMPILER=g++ -DCMAKE_BUILD_TYPE=Release
      - name: Build
        run: cmake --build build
      - name: Test
        run: cd build && ctest --output-on-failure

  build-clang-debug:
    needs: clang-format
    runs-on: ubuntu-latest
    name: Build and test with Clang (Debug)
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y cmake clang g++ catch2
      - name: Configure
        run: cmake -S . -B build -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fsanitize=address,undefined -fno-omit-frame-pointer"
      - name: Build
        run: cmake --build build
      - name: Test
        run: cd build && ctest --output-on-failure

  build-clang-release:
    needs: clang-format
    runs-on: ubuntu-latest
    name: Build and test with Clang (Release)
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y cmake clang g++ catch2
      - name: Configure
        run: cmake -S . -B build -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release
      - name: Build
        run: cmake --build build
      - name: Test
        run: cd build && ctest --output-on-failure
